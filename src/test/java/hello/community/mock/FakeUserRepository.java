package hello.community.mock;

import hello.community.application.user.domain.User;
import hello.community.application.user.service.port.UserRepository;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    private List<User> data = new ArrayList<>();
    private AtomicLong autoGeneratedId = new AtomicLong(0);

    @Override
    public User save(User user) {
        if (user.getId() == null || user.getId() == 0) {
            User newUser = User.builder()
                    .id(autoGeneratedId.getAndIncrement())
                    .email(user.getEmail())
                    .password(user.getPassword())
                    .nickname(user.getNickname())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .role(user.getRole())
                    .UID(user.getUID())
                    .createdAt(user.getCreatedAt())
                    .updatedAt(user.getUpdatedAt())
                    .deletedAt(user.getDeletedAt())
                    .build();
            data.add(newUser);
            return newUser;
        } else{
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
            return user;
        }
    }

    @Override
    public Optional<User> findByEmail(String email) {
        return data.stream().filter(item -> Objects.equals(item.getEmail(), email)).findFirst();
    }

    @Override
    public Optional<User> findByUID(String UID) {
        return data.stream().filter(item -> Objects.equals(item.getUID(), UID)).findFirst();
    }

    @Override
    public List<User> findAll() {
        return data;
    }
}
